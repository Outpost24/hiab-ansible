- name: Enroll certificates
  when: teddy_salad.install is defined and teddy_salad.install
  import_role:
    name: libellum_client
  tags:
    - libellum

- name: Install postgres
  when: teddy_salad.install_pg is defined and teddy_salad.install_pg
  import_role:
    name: postgresql
  tags:
    - postgresql

- name: Set teddy_salad_update
  set_fact:
    teddy_salad_update: true
  tags:
    - never
    - update

- name: Install teddy-salad and pre-reqs
  when: (teddy_salad_update is not defined or not teddy_salad_update) and teddy_salad.install is defined and teddy_salad.install
  package:
    name: [ teddy-salad, python2-psycopg2]
    state: present
  notify:
    - restart teddy-salad

- name: Update teddy-salad and pre-reqs # noqa 403 Skip rule for not using "state: latest" as this task's purpose is to   update the package
  when: teddy_salad_update is defined and teddy_salad_update and teddy_salad.install is defined and teddy_salad.install
  package:
    name: [ teddy-salad, python2-psycopg2 ]
    state: latest
  notify:
    - restart teddy-salad

- name: Set permissions on certificates
  import_role:
    name: libellum_certs
  notify:
    - restart teddy-salad
  tags:
    - libellum

- name: Copy teddy-salad config
  when: teddy_salad.install is defined and teddy_salad.install
  template:
    src: etc/teddy-salad.conf.d/20-config.yml.j2
    dest: /etc/teddy-salad.conf.d/20-config.yml
    owner: root
    group: teddy-salad
    mode: 0640
  notify:
    - restart teddy-salad

- name: Create teddysalad database postgres
  become_user: postgres
  when: teddy_salad.install_pg is defined and teddy_salad.install_pg
  block:
    - name: Create teddysalad database user
      postgresql_user:
        name: teddy-salad
        password: "{{ vault_teddy_salad_db_password }}"

    - name: Create teddysalad database
      postgresql_db:
        name: teddy-salad
        owner: teddy-salad

    - name: Check if teddy-salad database is initialized
      ignore_errors: "{{ ansible_check_mode }}"
      postgresql_query:
        login_host: "{{ teddy_salad.db.host | default('127.0.0.1') }}"
        db: teddy-salad
        login_user: teddy-salad
        login_password: "{{ vault_teddy_salad_db_password }}"
        ssl_mode: "{{ teddy_salad.db.sslmode }}"
        query: SELECT 1 AS initialized FROM information_schema.tables WHERE table_name = 'tenants' limit 1
      register: teddy_salad_db_initialized

- name: Initialize teddy-salad database
  when: teddy_salad.install is defined and teddy_salad.install and teddy_salad_db_initialized.rowcount is defined and teddy_salad_db_initialized.rowcount == 0
  run_once: true
  command:
    argv:
      - /usr/bin/teddy-salad
      - create-and-update-db
      - --stderr-log

- name: Check if code signing cert exists
  run_once: true
  delegate_to: localhost
  become: false
  stat:
    path: "{{ inventory_files_dir }}{{ tls_certificates_base_path }}/teddy-salad/codesign.crt"
  register: codesigningcert

- name: Create codesign certificate directories
  when: teddy_salad.install is defined and teddy_salad.install
  file:
    mode: 0755
    path: "{{ item }}/teddy-salad/"
    state: directory
  loop:
    - "{{ tls_certificates_base_path }}"
    - "{{ tls_keys_base_path }}"

- name: Code signing certificate creation
  when: teddy_salad.self_sign_code_signing is defined and teddy_salad.self_sign_code_signing and (codesigningcert.stat.exists is not defined or not codesigningcert.stat.exists) and teddy_salad.install is defined and teddy_salad.install # noqa 204
  run_once: true
  block:
    - name: Create codesign certificate directories locally # noqa 208
      delegate_to: localhost
      become: false
      file:
        path: "{{ inventory_files_dir }}{{ item }}/teddy-salad/"
        state: directory
      loop:
        - "{{ tls_certificates_base_path }}"
        - "{{ tls_keys_base_path }}"

    - name: Create self signed code signing certificate
      import_role:
        name: code_signing_cert
      vars:
        codesigning:
          cert: "{{ tls_certificates_base_path }}/teddy-salad/codesign.crt"
          key: "{{ tls_keys_base_path }}/teddy-salad/codesign.key"

    - name: Fetch code signing certificate
      ignore_errors: "{{ ansible_check_mode }}"
      fetch:
        flat: true
        src: "{{ tls_certificates_base_path }}/teddy-salad/codesign.crt"
        dest: "{{ inventory_files_dir }}{{ tls_certificates_base_path }}/teddy-salad/"

    - name: Fetch code signing key
      ignore_errors: "{{ ansible_check_mode }}"
      fetch:
        flat: true
        src: "{{ tls_keys_base_path }}/teddy-salad/codesign.key"
        dest: "{{ inventory_files_dir }}{{ tls_keys_base_path }}/teddy-salad/"

    - name: Ensure commit
      delegate_to: localhost
      become: false
      import_role:
        name: ensure_commit
      vars:
        ensure_commit:
          gitdir: "{{ inventory_files_dir }}"
          gitpaths: "{{ inventory_files_dir }}{{ tls_certificates_base_path }}/teddy-salad/codesign.crt {{ inventory_files_dir }}{{ tls_keys_base_path }}/teddy-salad/codesign.key" # noqa 204
          gitprompt: "Make sure you've committed the certificate and key we just created"
          check: "{{ teddy_salad.ensure_commit.check }}"
          fail: "{{ teddy_salad.ensure_commit.fail }}"

- name: Copy code signing certificate
  when: teddy_salad.install is defined and teddy_salad.install
  ignore_errors: "{{ ansible_check_mode }}"
  copy:
    src: "{{ inventory_files_dir }}{{ tls_certificates_base_path }}/teddy-salad/codesign.crt"
    dest: "{{ tls_certificates_base_path }}/teddy-salad/codesign.crt"
    owner: root
    group: teddy-salad
    mode: 0640

- name: Copy code signing key
  when: teddy_salad.install is defined and teddy_salad.install
  ignore_errors: "{{ ansible_check_mode }}"
  copy:
    src: "{{ inventory_files_dir }}{{ tls_keys_base_path }}/teddy-salad/codesign.key"
    dest: "{{ tls_keys_base_path }}/teddy-salad/codesign.key"
    owner: root
    group: teddy-salad
    mode: 0640

- name: Enable the server
  systemd:
    daemon_reload: true
    name: teddy-salad
    enabled: true

- name: Open firewall for teddy-salad service
  changed_when: "'Warning: ALREADY_ENABLED' not in firewallcmdout.stderr"
  register: firewallcmdout
  shell: |
    firewall-cmd {% if firewalld_zone is defined %} --zone={{ firewalld_zone }} {% endif %} --add-port=5046/tcp --permanent
    firewall-cmd {% if firewalld_zone is defined %} --zone={{ firewalld_zone }} {% endif %} --add-port=5046/tcp
